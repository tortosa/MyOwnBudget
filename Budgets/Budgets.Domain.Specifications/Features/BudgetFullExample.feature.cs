// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Budgets.Domain.Specifications.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("BudgetFullExample", Description="Simulating a real complex budget example to detect missing things in domain previ" +
        "ous to create different layers", SourceFile="Features\\BudgetFullExample.feature", SourceLine=0)]
    public partial class BudgetFullExampleFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "BudgetFullExample.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "BudgetFullExample", "Simulating a real complex budget example to detect missing things in domain previ" +
                    "ous to create different layers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("MayJunExample", SourceLine=4)]
        public virtual void MayJunExample()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("MayJunExample", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Label",
                            "DateFormat",
                            "Currency"});
                table1.AddRow(new string[] {
                            "1",
                            "MyBudget",
                            "dd/MM/yyyy",
                            "EUR"});
#line 6
 testRunner.Given("Budgets", ((string)(null)), table1, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "BudgetId",
                            "Label"});
                table2.AddRow(new string[] {
                            "1",
                            "1",
                            "Subscriptions"});
                table2.AddRow(new string[] {
                            "2",
                            "1",
                            "Vehicles"});
                table2.AddRow(new string[] {
                            "3",
                            "1",
                            "Savings"});
#line 9
 testRunner.And("GroupCategory associated to budgets", ((string)(null)), table2, "And ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "GroupCategoryId",
                            "Label"});
                table3.AddRow(new string[] {
                            "1",
                            "1",
                            "Asisa"});
                table3.AddRow(new string[] {
                            "2",
                            "1",
                            "Netflix"});
                table3.AddRow(new string[] {
                            "3",
                            "1",
                            "Amazon Music"});
                table3.AddRow(new string[] {
                            "4",
                            "1",
                            "Amazon Prime"});
                table3.AddRow(new string[] {
                            "5",
                            "1",
                            "PlayStation Network"});
                table3.AddRow(new string[] {
                            "6",
                            "2",
                            "Kia Ceed Insurance"});
                table3.AddRow(new string[] {
                            "7",
                            "2",
                            "Honda PCX Insurance"});
                table3.AddRow(new string[] {
                            "8",
                            "2",
                            "IVTM Honda PCX"});
                table3.AddRow(new string[] {
                            "9",
                            "2",
                            "IVTM Kia Ceed"});
                table3.AddRow(new string[] {
                            "10",
                            "3",
                            "Holidays"});
                table3.AddRow(new string[] {
                            "11",
                            "3",
                            "Christmas"});
                table3.AddRow(new string[] {
                            "12",
                            "3",
                            "Bicycle"});
#line 14
 testRunner.And("Category associated to GroupCategory", ((string)(null)), table3, "And ");
#line hidden
#line 28
 testRunner.When("MyBudget is actioned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 29
 testRunner.Then("GroupCategory Subscriptions should have 1000.52 EUR assigned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 30
 testRunner.Then("GroupCategory Subscriptions should have 1000.52 EUR available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 31
 testRunner.Then("Category Asisa should have 41.34 EUR assigned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 32
 testRunner.Then("Category Asisa should have 1.34 EUR available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
